{"version":3,"sources":["actions/index.js","components/LoginView.js","data/apiData.js","components/ChatView-components/UserPanel.js","components/ChatView-components/ChatsList.js","components/ChatView-components/UsersInChat.js","components/ChatView-components/MessageTimer.js","components/ChatView-components/MessagesWindow.js","components/ChatView-components/FriendPanel.js","components/ChatView-components/NewChatWindow.js","components/ChatView-components/DarkOverlay.js","components/ChatView.js","components/ProfileView.js","App.js","reportWebVitals.js","reducers/setActiveUser.js","reducers/setChatData.js","reducers/setUsersData.js","reducers/setActiveChat.js","reducers/setDataUpdated.js","reducers/setUserChats.js","reducers/setChatFriend.js","reducers/setUserFriends.js","reducers/setProfileViewOpen.js","reducers/setNewChatWindowOpen.js","reducers/setBrowserName.js","reducers/allReducers.js","index.js"],"names":["setActiveUser","userId","type","payload","setChatData","chats","setActiveChat","index","setUserChats","setChatFriend","friend","setProfileViewOpen","setNewChatWindowOpen","mapDispatchToProps","connect","state","users","setUsersData","activeUser","useForm","register","handleSubmit","errors","useState","incorrectLogin","setIncorrectLogin","setEmailInput","className","onSubmit","inputData","userExist","forEach","user","email","password","checkUserEmailAndPassword","icon","faComments","onChange","event","target","value","name","placeholder","ref","required","pattern","message","faLock","faUser","style","opacity","apiData","url","headers","versioning","backgroundImage","profileImageUrl","onClick","faUserEdit","faSignOutAlt","setDataUpdated","activeChatIndex","userChats","chatFriend","getVisibleMessageIndex","chat","messageIndex","JSON","parse","stringify","messages","reverse","findIndex","undefined","length","faPlus","map","lastMessage","lastMessageText","senderName","lastMessageSenderID","id","usersInChat","filter","firstName","sender","text","getLastMessageSender","activeChatClass","friendProfile","getFriendProfile","open","secondName","faArrowLeft","messageData","onMessageTimerChange","time","setTime","useEffect","timer","setTimeout","clearTimeout","hideMessageFromActiveUser","updatedMessage","activeChatOpen","chatMessagesEnd","useRef","scrollToBottom","scrollType","current","scrollIntoView","behavior","setLoading","setError","checked","setChecked","updateChatData","updatedMessages","activeChatID","chatsDataCopy","deleteMessage","displayDissapearingMessage","seenCount","deleteDissapearingMessage","updateTime","Date","now","push","splice","updateMessagesData","axios","put","then","catch","err","messageTimerChange","data","messageSenderID","messageText","messageSender","getMessageSender","messageContainerClass","messageTimer","dissapearingMessage","displayMessage","messageSenderId","inputField","reset","setDissapearingMessage","htmlFor","faPaperPlane","userFriends","setUserFriends","newChatWindowOpen","checkIfChatExists","friendId","chatIndex","chatExist","usersIDs","display","newChat","chatID","sameChat","newChatsData","addNewChat","friends","dataUpdateIndex","chatsLoading","setChatsLoading","setChatsError","isInitialMount","getDataFromBackEnd","getUserChats","getChatFriendInfo","getUserFriends","get","response","chatsData","matchedID","userID","sort","a","b","friendsId","faSpinner","profileViewOpen","imageUrlInput","setImageUrlInput","imageExists","setImageExists","emailExists","setEmailExists","image","Image","onload","this","width","onerror","src","checkIfImageExist","inputEmail","sameEmail","checkEmailDuplicate","defaultValue","firstname","secondname","e","city","about","setBrowserName","browserName","getBrowserName","navigator","vendor","match","userAgent","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","action","friendsID","initialViewState","initialWindowState","combineReducers","store","createStore","reducers","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1b62051a.chunk.js","sourcesContent":["export const setActiveUser = (userId) => {\r\n  return {\r\n    type: \"SET_ACTIVE_USER\",\r\n    payload: userId\r\n  };\r\n};\r\n\r\nexport const setChatData = (chats) => {\r\n  return {\r\n    type: \"SET_CHAT_DATA\",\r\n    payload: chats\r\n  };\r\n};\r\n\r\nexport const setUsersData = (users) => {\r\n  return {\r\n    type: \"SET_USERS_DATA\",\r\n    payload: users\r\n  };\r\n};\r\n\r\nexport const setActiveChat = (index) => {\r\n  return {\r\n    type: \"SET_ACTIVE_CHAT\",\r\n    payload: index\r\n  };\r\n};\r\n\r\nexport const setDataUpdated = () => {\r\n  return {\r\n    type: \"SET_DATA_UPDATED\"\r\n  };\r\n};\r\n\r\nexport const setUserChats = (chats) => {\r\n  return {\r\n    type: \"SET_USER_CHATS\",\r\n    payload: chats\r\n  };\r\n};\r\n\r\nexport const setChatFriend = (friend) => {\r\n  return {\r\n    type: \"SET_CHAT_FRIEND\",\r\n    payload: friend\r\n  };\r\n};\r\n\r\nexport const setUserFriends = (friends) => {\r\n  return {\r\n    type: \"SET_USER_FRIENDS\",\r\n    payload: friends\r\n  };\r\n};\r\n\r\nexport const setProfileViewOpen = () => {\r\n  return {\r\n    type: \"SET_PROFILE_VIEW_OPEN\"\r\n  };\r\n};\r\n\r\nexport const setNewChatWindowOpen = () => {\r\n  return {\r\n    type: \"SET_NEW_CHAT_WINDOW_OPEN\"\r\n  };\r\n};\r\n\r\nexport const setBrowserName = (browserName) => {\r\n  return {\r\n    type: \"SET_BROWSER_NAME\",\r\n    payload: browserName\r\n  };\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faComments } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faUser } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faLock } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport { useForm } from \"react-hook-form\";\r\nimport { connect } from \"react-redux\";\r\nimport { setActiveUser } from \"../actions\";\r\n\r\nfunction LoginView({ users, setActiveUser, activeUser }) {\r\n  const { register, handleSubmit, errors } = useForm();\r\n\r\n  const [incorrectLogin, setIncorrectLogin] = useState(false);\r\n\r\n  const [emailInput, setEmailInput] = useState(\"\");\r\n\r\n  const checkUserEmailAndPassword = (inputData) => {\r\n    let userExist = false;\r\n    users.forEach((user, index) => {\r\n      if (user.email === inputData.email && user.password === inputData.password) {\r\n        userExist = true;\r\n        setActiveUser(user);\r\n      }\r\n    });\r\n    if (userExist) {\r\n      setIncorrectLogin(false);\r\n    } else {\r\n      setIncorrectLogin(true);\r\n    }\r\n  };\r\n\r\n  const update = (event) => {\r\n    setEmailInput(event.target.value);\r\n  };\r\n\r\n  const onSubmit = (inputData) => {\r\n    checkUserEmailAndPassword(inputData);\r\n  };\r\n\r\n  if (activeUser === \"\")\r\n    return (\r\n      <div className=\"login-view-container\">\r\n        <form className=\"login-form form\" onSubmit={handleSubmit(onSubmit)}>\r\n          <div className=\"logo\">\r\n            <FontAwesomeIcon icon={faComments} className=\"icon icon-top\" />\r\n            <h1 className=\"form-main-heading\">Chat App</h1>\r\n          </div>\r\n          <div className=\"form-input\">\r\n            <div>\r\n              <div className=\"input-field\">\r\n                <input\r\n                  onChange={update}\r\n                  name=\"email\"\r\n                  placeholder=\"Email\"\r\n                  ref={register({\r\n                    required: \"*Email is required\",\r\n                    pattern: {\r\n                      value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\r\n                      message: \"*Invalid email address\"\r\n                    }\r\n                  })}\r\n                />\r\n                <FontAwesomeIcon icon={faLock} className=\"icon\" />\r\n              </div>\r\n            </div>\r\n            <div className=\"error-message\">{errors.email && errors.email.message}</div>\r\n          </div>\r\n          <div className=\"form-input\">\r\n            <div className=\"input-field\">\r\n              <input type=\"password\" placeholder=\"Password\" name=\"password\" ref={register({ required: \"*Password is required\" })} />\r\n              <FontAwesomeIcon icon={faUser} className=\"icon\" />\r\n            </div>\r\n            <div className=\"error-message\">{errors.password && <p>{errors.password.message}</p>}</div>\r\n            <div className=\"error-message error-message-incorrect-input\" style={{ opacity: incorrectLogin ? 1 : 0 }}>\r\n              *Incorrect email or password\r\n            </div>\r\n          </div>\r\n          <button className=\"btn-wide btn-submit\" type=\"submit\">\r\n            Login\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  else return null;\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    users: state.setUsersData.users,\r\n    activeUser: state.setActiveUser.activeUser\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  setActiveUser\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginView);\r\n","const url = \"https://api.jsonbin.io/b/603b79309342196a6a69de29\";\r\nconst secretKey = \"$2b$10$AgTzU7bySpzUlTMa4xuwT.Y.GSwY4okUERqzYphPesdnIj0G3K32q\";\r\nconst headers = {\r\n  headers: { \"secret-key\": secretKey, versioning: false }\r\n};\r\n\r\nconst apiData = { url: url, headers: headers };\r\n\r\nexport default apiData;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faSignOutAlt } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faUserEdit } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport { setActiveUser, setProfileViewOpen, setChatData, setUserChats } from \"../../actions\";\r\n\r\nfunction UserPanel({ activeUser, setActiveUser, setProfileViewOpen, setChatData }) {\r\n  return (\r\n    <div className=\"user-panel-container\">\r\n      <div className=\"container\">\r\n        <div className=\"profile-image\" style={{ backgroundImage: `url(\"${activeUser.profileImageUrl}\")` }}></div>\r\n        <button className=\"btn btn-edit-profile\" onClick={() => setProfileViewOpen()}>\r\n          <FontAwesomeIcon icon={faUserEdit} className=\"icon\" />\r\n          <div className=\"btn-text\">Profile</div>\r\n        </button>\r\n        <button\r\n          className=\"btn btn-sign-out\"\r\n          onClick={() => {\r\n            setActiveUser(\"\");\r\n            setChatData(\"\");\r\n            setUserChats(\"\");\r\n          }}\r\n        >\r\n          <FontAwesomeIcon icon={faSignOutAlt} className=\"icon\" />\r\n          <div className=\"btn-text\">Sign out</div>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    activeUser: state.setActiveUser.activeUser\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  setActiveUser,\r\n  setProfileViewOpen,\r\n  setChatData,\r\n  setUserChats\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserPanel);\r\n","import React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlus } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport { setActiveChat, setDataUpdated, setChatFriend, setNewChatWindowOpen } from \"../../actions\";\r\n\r\nfunction ChatsList({ activeUser, setActiveChat, activeChatIndex, userChats, setNewChatWindowOpen }) {\r\n  const getLastMessageSender = (chat) => {\r\n    let lastMessageText = \"\";\r\n    let senderName = \"\";\r\n    let messageIndex = getVisibleMessageIndex(chat);\r\n    if (chat.messages.length > 0 && messageIndex >= 0 && chat.messages.length > messageIndex) {\r\n      let lastMessageSenderID = chat.messages[messageIndex][0];\r\n      lastMessageText = chat.messages[messageIndex][1];\r\n      senderName = \"\";\r\n      if (lastMessageSenderID === activeUser.id) {\r\n        senderName = \"you\";\r\n      } else {\r\n        senderName = chat.usersInChat.filter((user) => lastMessageSenderID === user.id);\r\n        senderName = senderName[0].firstName;\r\n      }\r\n    }\r\n    let lastMessage = { sender: senderName, text: lastMessageText };\r\n    return lastMessage;\r\n  };\r\n\r\n  const getVisibleMessageIndex = (chat) => {\r\n    let chatsCopy = JSON.parse(JSON.stringify(chat));\r\n    let messageIndex = chatsCopy.messages.reverse().findIndex(function (message) {\r\n      return message[2] === undefined;\r\n    });\r\n    messageIndex = chat.messages.length - messageIndex - 1;\r\n    return messageIndex;\r\n  };\r\n\r\n  const getFriendProfile = (index) => {\r\n    let usersInChat = userChats[index].usersInChat;\r\n    let friendProfile = usersInChat.filter((user) => activeUser.id !== user.id);\r\n    return friendProfile[0];\r\n  };\r\n\r\n  if (userChats !== \"\" && userChats !== undefined)\r\n    return (\r\n      <div className=\"chats-list-container\">\r\n        <div className=\"chats-list-top\">\r\n          <h1>Chats</h1>\r\n          <button className=\"btn btn-new-chat\" onClick={() => setNewChatWindowOpen()}>\r\n            <FontAwesomeIcon icon={faPlus} className=\"icon\" />\r\n          </button>\r\n        </div>\r\n        <div className=\"user-chats\">\r\n          {userChats.map((chat, index) => {\r\n            let lastMessage = getLastMessageSender(chat);\r\n            let activeChatClass = activeChatIndex === index ? \"active-chat\" : \"\";\r\n            let friendProfile = getFriendProfile(index);\r\n            return (\r\n              <div className={`user-chat ${activeChatClass}`} key={index} onClick={() => setActiveChat({ index: index, open: true })}>\r\n                <div className=\"friend-profile-image\" style={{ backgroundImage: `url(\"${friendProfile.profileImageUrl}\")` }}></div>\r\n                <div className=\"chat-info\">\r\n                  <div className=\"name-container\">\r\n                    <div className=\"firstname\">{friendProfile.firstName}</div>\r\n                    <div className=\"secondname\">{friendProfile.secondName}</div>\r\n                  </div>\r\n                  <div className=\"last-message-container\">\r\n                    <div className=\"message-sender\">{`${lastMessage.sender}${lastMessage.sender !== \"\" ? \":\" : \"\"}`}</div>\r\n                    <div className=\"message-text\">{lastMessage.text}</div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  else return null;\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    activeUser: state.setActiveUser.activeUser,\r\n    users: state.setUsersData.users,\r\n    chats: state.setChatData.chats,\r\n    activeChatIndex: state.setActiveChat.activeChatIndex,\r\n    userChats: state.setUserChats.userChats,\r\n    chatFriend: state.setChatFriend.chatFriend[0]\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  setActiveChat,\r\n  setDataUpdated,\r\n  setChatFriend,\r\n  setNewChatWindowOpen\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ChatsList);\r\n","import React from \"react\";\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faArrowLeft } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport { setActiveChat } from \"../../actions\";\r\n\r\nfunction UsersInChat({ activeUser, activeChatIndex, userChats, setActiveChat }) {\r\n  return (\r\n    <div className=\"users-in-chat-container\">\r\n      {userChats[activeChatIndex].usersInChat.map((user, index) => {\r\n        let profileImageUrl = user.profileImageUrl;\r\n        return user.id !== activeUser.id ? (\r\n          <div key={index} className=\"user-in-chat-info\">\r\n            <button className=\"btn btn-back\" onClick={() => setActiveChat({ open: false })}>\r\n              <FontAwesomeIcon icon={faArrowLeft} className=\"icon\" />\r\n            </button>\r\n            <div className=\"user-avatar-container\" style={{ backgroundImage: `url(\"${profileImageUrl}\")` }}></div>\r\n            <div className=\"name-container\">\r\n              <div className=\"user-firstname user-name\">{user.firstName}</div>\r\n              <div className=\"user-secondname user-name\">{user.secondName}</div>\r\n            </div>\r\n          </div>\r\n        ) : null;\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    activeUser: state.setActiveUser.activeUser,\r\n    activeChatIndex: state.setActiveChat.activeChatIndex,\r\n    userChats: state.setUserChats.userChats\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  setActiveChat\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UsersInChat);\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nfunction MessageTimer({ messageData, activeUser, onMessageTimerChange, messageIndex }) {\r\n  const [time, setTime] = useState(3);\r\n\r\n  useEffect(() => {\r\n    if (time >= 1) {\r\n      let timer = setTimeout(() => {\r\n        let currentTime = time;\r\n        setTime(currentTime - 1);\r\n      }, 1000);\r\n      return () => clearTimeout(timer);\r\n    } else if (time === 0) {\r\n      hideMessageFromActiveUser();\r\n    }\r\n  });\r\n\r\n  const hideMessageFromActiveUser = () => {\r\n    let displayMessage = messageData[2];\r\n    displayMessage.forEach((user, index) => {\r\n      let userId = user[0];\r\n      if (activeUser.id === userId) {\r\n        let updatedMessage = messageData;\r\n        updatedMessage[2][index][1] = false;\r\n        onMessageTimerChange(updatedMessage, messageIndex);\r\n      }\r\n    });\r\n  };\r\n\r\n  return <div className=\"message-timer\">{`00:${time >= 10 ? \"\" : \"0\"}${time}`}</div>;\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    activeUser: state.setActiveUser.activeUser\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(MessageTimer);\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { connect } from \"react-redux\";\r\nimport axios from \"axios\";\r\n\r\nimport apiData from \"../../data/apiData\";\r\n\r\nimport UsersInChat from \"./UsersInChat\";\r\nimport MessageTimer from \"./MessageTimer\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPaperPlane } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport { setActiveChat, setChatData } from \"../../actions\";\r\n\r\nfunction MessagesWindow({ activeUser, chats, activeChatIndex, userChats, setActiveChat, activeChatOpen, setChatData, chatFriend }) {\r\n  const chatMessagesEnd = useRef(null);\r\n  const { register, handleSubmit, errors } = useForm();\r\n\r\n  const scrollToBottom = (scrollType) => {\r\n    chatMessagesEnd.current?.scrollIntoView({ behavior: scrollType });\r\n  };\r\n\r\n  useEffect(() => {\r\n    scrollToBottom(\"smooth\");\r\n  }, [chats, activeChatOpen]);\r\n\r\n  useEffect(() => {\r\n    scrollToBottom(\"auto\");\r\n  }, [activeChatIndex]);\r\n\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(\"\");\r\n\r\n  const [checked, setChecked] = useState(false);\r\n  const handleClick = () => setChecked(!checked);\r\n\r\n  const getMessageSender = (messageSenderID) => {\r\n    let usersInChat = userChats[activeChatIndex].usersInChat;\r\n    let messageSender = usersInChat.filter((user) => messageSenderID === user.id);\r\n    return messageSender[0];\r\n  };\r\n\r\n  const setDissapearingMessage = (messageData, dissapearingMessage) => {\r\n    if (dissapearingMessage) {\r\n      let displayDissapearingMessage = [\r\n        [activeUser.id, true],\r\n        [chatFriend.id, true]\r\n      ];\r\n      messageData.push(displayDissapearingMessage);\r\n    }\r\n    return messageData;\r\n  };\r\n\r\n  const deleteDissapearingMessage = (messageData) => {\r\n    let displayDissapearingMessage = messageData[2];\r\n    let seenCount = 0;\r\n    if (displayDissapearingMessage) {\r\n      displayDissapearingMessage.forEach((message, index) => {\r\n        if (!message[1]) {\r\n          seenCount++;\r\n        }\r\n      });\r\n      if (seenCount === displayDissapearingMessage.length) {\r\n        return true;\r\n      } else return false;\r\n    }\r\n  };\r\n\r\n  const updateMessagesData = (messageData, messageIndex) => {\r\n    let activeChatID = userChats[activeChatIndex].id;\r\n    let chatsDataCopy = JSON.parse(JSON.stringify(chats));\r\n    let deleteMessage = deleteDissapearingMessage(messageData);\r\n    chatsDataCopy.forEach((chat) => {\r\n      if (activeChatID === chat.id) {\r\n        if (messageIndex === undefined) {\r\n          chat.updateTime = Date.now();\r\n          chat.messages.push(messageData);\r\n        } else {\r\n          if (deleteMessage) {\r\n            chat.messages.splice(messageIndex, 1);\r\n          } else {\r\n            chat.messages[messageIndex] = messageData;\r\n          }\r\n        }\r\n      }\r\n    });\r\n    return chatsDataCopy;\r\n  };\r\n\r\n  const onSubmit = (data, inputField) => {\r\n    inputField.target.reset();\r\n    let messageData = [activeUser.id, data.message];\r\n    messageData = setDissapearingMessage(messageData, data.dissapearingMessage);\r\n    updateChatData(messageData);\r\n  };\r\n\r\n  const updateChatData = (messageData, messageIndex) => {\r\n    let updatedMessages = updateMessagesData(messageData, messageIndex);\r\n    setChatData(updatedMessages);\r\n    setActiveChat({ index: 0 });\r\n\r\n    axios\r\n      .put(apiData.url, { chats: updatedMessages }, apiData.headers)\r\n      .then(() => {\r\n        setLoading(false);\r\n      })\r\n      .catch((err) => {\r\n        setLoading(false);\r\n        setError(err);\r\n      });\r\n  };\r\n\r\n  const displayDissapearingMessage = (dissapearingMessage) => {\r\n    let displayMessage = true;\r\n    if (dissapearingMessage) {\r\n      dissapearingMessage.forEach((message, index) => {\r\n        let messageSenderId = message[0];\r\n        if (activeUser.id === messageSenderId) displayMessage = message[1];\r\n      });\r\n    }\r\n    return displayMessage;\r\n  };\r\n\r\n  const messageTimerChange = (data, messageIndex) => {\r\n    updateChatData(data, messageIndex);\r\n  };\r\n\r\n  return (\r\n    <div className={`messages-window-container messages-window-hide-mobile ${activeChatOpen ? \"messages-window-show-mobile\" : \"\"}`}>\r\n      <UsersInChat />\r\n      <div className=\"sent-messages-container\">\r\n        <div className=\"overflow-wrapper\">\r\n          {userChats[activeChatIndex].messages.map((message, index) => {\r\n            let messageSenderID = message[0];\r\n            let messageText = message[1];\r\n            let messageSender = getMessageSender(messageSenderID);\r\n            let messageContainerClass = activeUser.id === messageSenderID ? \"right\" : \"left\";\r\n            let messageTimer = message[2];\r\n            let displayMessage = displayDissapearingMessage(message[2]);\r\n            if (displayMessage)\r\n              return (\r\n                <div className={`message-container message-container-${messageContainerClass}`} key={index}>\r\n                  {messageTimer ? (\r\n                    <MessageTimer messageData={message} messageIndex={index} onMessageTimerChange={messageTimerChange} />\r\n                  ) : null}\r\n                  <div className=\"name-container\">\r\n                    <div className=\"sender-firstname sender-name\">{messageSender.firstName}</div>\r\n                    <div className=\"sender-secondname sender-name\">{messageSender.secondName}</div>\r\n                  </div>\r\n                  <div className=\"friend-avatar-container\" style={{ backgroundImage: `url(\"${messageSender.profileImageUrl}\")` }}></div>\r\n                  <div className=\"message-text\">{messageText}</div>\r\n                </div>\r\n              );\r\n            else return null;\r\n          })}\r\n          <div ref={chatMessagesEnd} className=\"bottom-container\"></div>\r\n        </div>\r\n      </div>\r\n\r\n      <form className=\"send-message-container\" onSubmit={handleSubmit(onSubmit)}>\r\n        <div className=\"dissapearing-message-container\">\r\n          <label htmlFor=\"dissapearingMessage\">Dissapearing message</label>\r\n          <input className=\"check-box\" type=\"checkbox\" name=\"dissapearingMessage\" checked={checked} onChange={handleClick} ref={register} />\r\n        </div>\r\n        <textarea\r\n          className=\"message-input\"\r\n          type=\"text\"\r\n          placeholder=\"Type a message here...\"\r\n          name=\"message\"\r\n          ref={register({ required: true })}\r\n        />\r\n        <button className=\"btn btn-send-message\">\r\n          <FontAwesomeIcon icon={faPaperPlane} className=\"icon\" />\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    activeUser: state.setActiveUser.activeUser,\r\n    chats: state.setChatData.chats,\r\n    activeChatIndex: state.setActiveChat.activeChatIndex,\r\n    activeChatOpen: state.setActiveChat.activeChatOpen,\r\n    userChats: state.setUserChats.userChats,\r\n    chatFriend: state.setChatFriend.chatFriend\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  setActiveChat,\r\n  setChatData\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MessagesWindow);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nfunction FriendPanel({ chatFriend }) {\r\n  return (\r\n    <div className=\"friend-panel-container\">\r\n      <div className=\"container\">\r\n        <div className=\"profile-image\" style={{ backgroundImage: `url(\"${chatFriend.profileImageUrl}\")` }}></div>\r\n        <div className=\"names-container\">\r\n          <div className=\"first-name\">{chatFriend.firstName}</div>\r\n          <div className=\"second-name\">{chatFriend.secondName}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    chatFriend: state.setChatFriend.chatFriend\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(FriendPanel);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { setChatData, setActiveChat, setNewChatWindowOpen } from \"../../actions\";\r\n\r\nfunction NewChatWindow({ userFriends, activeUser, newChatWindowOpen, chats, setChatData, userChats, setActiveChat, setNewChatWindowOpen }) {\r\n  const addNewChat = (friendId) => {\r\n    let chatsDataCopy = JSON.parse(JSON.stringify(chats));\r\n    let newChatId = chats.length + 1;\r\n    let newChat = {\r\n      chatID: newChatId,\r\n      updateTime: Date.now(),\r\n      usersIDs: [activeUser.id, friendId],\r\n      messages: []\r\n    };\r\n    let sameChat = checkIfChatExists(friendId);\r\n    if (sameChat.chatExist) {\r\n      setActiveChat({ index: sameChat.chatIndex, open: true });\r\n    } else {\r\n      let newChatsData = [newChat, ...chatsDataCopy];\r\n      setChatData(newChatsData);\r\n      setActiveChat({ index: 0, open: true });\r\n    }\r\n    setNewChatWindowOpen();\r\n  };\r\n\r\n  const checkIfChatExists = (friendId) => {\r\n    let chatExist = false;\r\n    let chatIndex;\r\n    userChats.forEach((chat, index) => {\r\n      chat.usersIDs.forEach((id) => {\r\n        if (friendId === id) {\r\n          chatExist = true;\r\n          chatIndex = index;\r\n        }\r\n      });\r\n    });\r\n    return { chatExist: chatExist, chatIndex: chatIndex };\r\n  };\r\n\r\n  if (userFriends !== \"\")\r\n    return (\r\n      <div className=\"new-chat-container\" style={{ display: newChatWindowOpen ? \"flex\" : \"none\" }}>\r\n        <h1>New chat</h1>\r\n        <div className=\"friends-container\">\r\n          {userFriends.map((friend, index) => (\r\n            <div className=\"friend-info\" key={index} onClick={() => addNewChat(friend.id)}>\r\n              <div className=\"friend-profile-image\" style={{ backgroundImage: `url(\"${friend.profileImageUrl}\")` }}></div>\r\n              <div className=\"name-container\">\r\n                <div className=\"firstname\">{friend.firstName}</div>\r\n                <div className=\"secondname\">{friend.secondName}</div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  else return null;\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userFriends: state.setUserFriends.userFriends,\r\n    newChatWindowOpen: state.setNewChatWindowOpen.newChatWindowOpen,\r\n    activeUser: state.setActiveUser.activeUser,\r\n    chats: state.setChatData.chats,\r\n    userChats: state.setUserChats.userChats\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = { setChatData, setActiveChat, setNewChatWindowOpen };\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NewChatWindow);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { setNewChatWindowOpen } from \"../../actions\";\r\n\r\nfunction DarkOverlay({ setNewChatWindowOpen, newChatWindowOpen }) {\r\n  return (\r\n    <div\r\n      className=\"dark-overlay-container\"\r\n      style={{ display: newChatWindowOpen ? \"flex\" : \"none\" }}\r\n      onClick={() => setNewChatWindowOpen()}\r\n    ></div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    newChatWindowOpen: state.setNewChatWindowOpen.newChatWindowOpen\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  setNewChatWindowOpen\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DarkOverlay);\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport axios from \"axios\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faSpinner } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport apiData from \"../data/apiData\";\r\n\r\nimport UserPanel from \"./ChatView-components/UserPanel\";\r\nimport ChatsList from \"./ChatView-components/ChatsList\";\r\nimport MessagesWindow from \"./ChatView-components/MessagesWindow\";\r\nimport FriendPanel from \"./ChatView-components/FriendPanel\";\r\nimport NewChatWindow from \"./ChatView-components/NewChatWindow\";\r\nimport DarkOverlay from \"./ChatView-components/DarkOverlay\";\r\n\r\nimport { setUserChats, setChatFriend, setUserFriends, setChatData } from \"../actions\";\r\n\r\nfunction ChatView({\r\n  users,\r\n  chats,\r\n  activeUser,\r\n  userChats,\r\n  dataUpdateIndex,\r\n  activeChatIndex,\r\n  setUserChats,\r\n  setChatFriend,\r\n  setUserFriends,\r\n  setChatData\r\n}) {\r\n  const [chatsLoading, setChatsLoading] = useState(false);\r\n  const [chatsError, setChatsError] = useState(\"\");\r\n\r\n  const isInitialMount = useRef(true);\r\n\r\n  useEffect(() => {\r\n    if (activeUser !== \"\") {\r\n      getDataFromBackEnd();\r\n    }\r\n  }, [activeUser, dataUpdateIndex]);\r\n\r\n  useEffect(() => {\r\n    if (isInitialMount.current) {\r\n      isInitialMount.current = false;\r\n    } else {\r\n      setUserChats(getUserChats());\r\n    }\r\n  }, [chats]);\r\n\r\n  useEffect(() => {\r\n    if (isInitialMount.current) {\r\n      isInitialMount.current = false;\r\n    } else {\r\n      getChatFriendInfo();\r\n      getUserFriends();\r\n    }\r\n  }, [userChats]);\r\n\r\n  useEffect(() => {\r\n    if (activeUser !== \"\") {\r\n      getChatFriendInfo();\r\n    }\r\n  }, [activeChatIndex]);\r\n\r\n  const getDataFromBackEnd = () => {\r\n    setChatsLoading(true);\r\n    axios\r\n      .get(apiData.url, apiData.headers)\r\n      .then((response) => {\r\n        setChatsLoading(false);\r\n        let chatsData = response.data.chats;\r\n        setChatData(chatsData);\r\n      })\r\n      .catch((err) => {\r\n        setChatsError(err);\r\n        setChatsLoading(false);\r\n      });\r\n  };\r\n\r\n  const getUserChats = () => {\r\n    let chatsDataCopy = JSON.parse(JSON.stringify(chats));\r\n    if (chatsDataCopy !== \"\" && chatsDataCopy !== undefined && users !== \"\" && users !== undefined) {\r\n      let userChats = [];\r\n      chatsDataCopy.forEach((chat, chatIndex) => {\r\n        let matchedID = false;\r\n        let usersInChat = [];\r\n        chat.usersIDs.forEach((userID) => {\r\n          if (userID === activeUser.id) {\r\n            matchedID = true;\r\n          }\r\n          users.forEach((user) => {\r\n            if (userID === user.id) {\r\n              usersInChat.push(user);\r\n            }\r\n          });\r\n        });\r\n        if (matchedID) {\r\n          userChats.push(chat);\r\n          userChats[chatIndex].usersInChat = usersInChat;\r\n        }\r\n      });\r\n      userChats.sort((a, b) => b.updateTime - a.updateTime);\r\n      return userChats;\r\n    }\r\n  };\r\n\r\n  const getUserFriends = () => {\r\n    let userFriends = [];\r\n    if (userChats !== undefined && userChats !== \"\" && activeUser !== \"\") {\r\n      activeUser.friendsId.forEach((friendId) => {\r\n        users.forEach((user) => {\r\n          if (friendId === user.id) {\r\n            userFriends.push(user);\r\n          }\r\n        });\r\n      });\r\n      setUserFriends(userFriends);\r\n    }\r\n  };\r\n\r\n  const getChatFriendInfo = () => {\r\n    if (userChats !== undefined && userChats !== \"\") {\r\n      let userChatsCopy = JSON.parse(JSON.stringify(userChats));\r\n      let chatFriend = userChatsCopy[activeChatIndex].usersInChat.filter((user) => activeUser.id !== user.id);\r\n      setChatFriend(chatFriend[0]);\r\n    }\r\n  };\r\n\r\n  if (userChats !== \"\" && userChats !== undefined && activeUser !== \"\")\r\n    return (\r\n      <div className=\"chat-view-container\">\r\n        <div className=\"chat-view-content\">\r\n          <UserPanel />\r\n          <ChatsList />\r\n          <MessagesWindow />\r\n          <FriendPanel />\r\n          <DarkOverlay />\r\n          <NewChatWindow />\r\n        </div>\r\n      </div>\r\n    );\r\n  else if (chatsLoading) {\r\n    return (\r\n      <div className=\"chats-loading-container\">\r\n        Loading chats\r\n        <FontAwesomeIcon icon={faSpinner} className=\"icon\" />\r\n      </div>\r\n    );\r\n  } else return null;\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    users: state.setUsersData.users,\r\n    chats: state.setChatData.chats,\r\n    activeUser: state.setActiveUser.activeUser,\r\n    userChats: state.setUserChats.userChats,\r\n    activeChatIndex: state.setActiveChat.activeChatIndex,\r\n    dataUpdateIndex: state.setDataUpdated.dataUpdateIndex\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  setChatData,\r\n  setUserChats,\r\n  setUserFriends,\r\n  setChatFriend\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ChatView);\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { connect } from \"react-redux\";\r\nimport { setActiveUser, setProfileViewOpen } from \"../actions\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faArrowLeft } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nfunction ProfileView({ users, activeUser, profileViewOpen, setActiveUser, setProfileViewOpen }) {\r\n  const { register, handleSubmit, errors } = useForm();\r\n  const [imageUrlInput, setImageUrlInput] = useState(\"\");\r\n  const [imageExists, setImageExists] = useState(true);\r\n  const [emailExists, setEmailExists] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setImageUrlInput(activeUser.profileImageUrl);\r\n  }, [profileViewOpen]);\r\n\r\n  const [emailInput, setEmailInput] = useState(\"\");\r\n\r\n  const checkIfImageExist = (url) => {\r\n    if (url !== \"\") {\r\n      let image = new Image();\r\n      image.onload = function () {\r\n        if (this.width > 0) {\r\n          setImageExists(true);\r\n        }\r\n      };\r\n      image.onerror = function () {\r\n        setImageExists(false);\r\n      };\r\n      image.src = url;\r\n    }\r\n  };\r\n\r\n  checkIfImageExist(imageUrlInput);\r\n\r\n  const checkEmailDuplicate = (inputEmail) => {\r\n    let sameEmail = false;\r\n    users.forEach((user) => {\r\n      if (activeUser.id !== user.id) {\r\n        if (inputEmail !== user.email) {\r\n        } else {\r\n          sameEmail = true;\r\n        }\r\n      }\r\n    });\r\n    if (sameEmail) {\r\n      setEmailExists(true);\r\n    } else {\r\n      setEmailExists(false);\r\n    }\r\n  };\r\n\r\n  const onSubmit = (inputData) => {\r\n    checkEmailDuplicate(inputData.email);\r\n    if (!emailExists && (imageExists || inputData.profileImageUrl === \"\")) {\r\n      if (inputData.profileImageUrl === \"\") {\r\n        inputData.profileImageUrl = \"./images/user.png\";\r\n      }\r\n      setActiveUser(inputData);\r\n    }\r\n  };\r\n\r\n  function update(event) {\r\n    setEmailInput(event.target.value);\r\n  }\r\n\r\n  if (profileViewOpen)\r\n    return (\r\n      <div className=\"profile-view-container\" key={activeUser}>\r\n        <form className=\"profile-form form\" onSubmit={handleSubmit(onSubmit)}>\r\n          <h1 className=\"form-main-heading\">\r\n            <button className=\"btn btn-back\" onClick={() => setProfileViewOpen()}>\r\n              <FontAwesomeIcon icon={faArrowLeft} className=\"icon\" />\r\n            </button>\r\n            EDIT PROFILE\r\n          </h1>\r\n          <div className=\"profile-info-container\">\r\n            <div className=\"profile-image\" style={{ backgroundImage: `url(\"${activeUser.profileImageUrl}\")` }}></div>\r\n            <div className=\"profile-info\">\r\n              <div className=\"names-container\">\r\n                <div className=\"first-name\">{activeUser.firstName}</div>\r\n                <div className=\"second-name\">{activeUser.secondName}</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"form-input\">\r\n            <div className=\"input-field\">\r\n              <label htmlFor=\"email\">Email</label>\r\n              <input\r\n                defaultValue={activeUser.email}\r\n                onChange={update}\r\n                name=\"email\"\r\n                placeholder=\"Email\"\r\n                ref={register({\r\n                  required: \"*Email is required\",\r\n                  pattern: {\r\n                    value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\r\n                    message: \"*Invalid email address\"\r\n                  }\r\n                })}\r\n              />\r\n            </div>\r\n            <div className=\"error-message\">{errors.email && !emailExists ? errors.email.message : \"\"}</div>\r\n            <div className=\"error-message error-message-email-exist\">{emailExists ? \"*User with same email exists\" : \"\"}</div>\r\n          </div>\r\n          <div className=\"form-input\">\r\n            <div className=\"input-field\">\r\n              <label htmlFor=\"password\">Password</label>\r\n              <input\r\n                defaultValue={activeUser.password}\r\n                type=\"password\"\r\n                placeholder=\"Password\"\r\n                name=\"password\"\r\n                ref={register({ required: \"*Password is required\" })}\r\n              />\r\n            </div>\r\n            <div className=\"error-message\">{errors.password && <p>{errors.password.message}</p>}</div>\r\n          </div>\r\n          <div className=\"form-input\">\r\n            <div className=\"input-field\">\r\n              <label htmlFor=\"firstname\">First name</label>\r\n              <input\r\n                defaultValue={activeUser.firstName}\r\n                type=\"text\"\r\n                placeholder=\"First name\"\r\n                name=\"firstName\"\r\n                ref={register({ required: \"*First name is required\" })}\r\n              />\r\n            </div>\r\n            <div className=\"error-message\">{errors.firstname && <p>{errors.firstname.message}</p>}</div>\r\n          </div>\r\n          <div className=\"form-input\">\r\n            <div className=\"input-field\">\r\n              <label htmlFor=\"secondname\">Second name</label>\r\n              <input\r\n                defaultValue={activeUser.secondName}\r\n                type=\"text\"\r\n                placeholder=\"Second name\"\r\n                name=\"secondName\"\r\n                ref={register({ required: \"*Second name is required\" })}\r\n              />\r\n            </div>\r\n            <div className=\"error-message\">{errors.secondname && <p>{errors.secondname.message}</p>}</div>\r\n          </div>\r\n          <div className=\"form-input\">\r\n            <div className=\"input-field\">\r\n              <label htmlFor=\"profileImageUrl\">Profile image</label>\r\n              <input\r\n                defaultValue={activeUser.profileImageUrl}\r\n                type=\"text\"\r\n                placeholder=\"Profile image url\"\r\n                name=\"profileImageUrl\"\r\n                ref={register()}\r\n                onChange={(e) => setImageUrlInput(e.target.value)}\r\n              />\r\n            </div>\r\n            <div className=\"error-message\">{imageExists || imageUrlInput === \"\" ? \"\" : \"Image does not exist\"}</div>\r\n          </div>\r\n          <div className=\"form-input\">\r\n            <div className=\"input-field\">\r\n              <label htmlFor=\"city\">City</label>\r\n              <input defaultValue={activeUser.city} type=\"text\" placeholder=\"City\" name=\"city\" ref={register()} />\r\n            </div>\r\n            <div className=\"error-message\">{errors.city && <p>{errors.city.message}</p>}</div>\r\n          </div>\r\n          <div className=\"form-input form-input-about\">\r\n            <div className=\"input-field\">\r\n              <label htmlFor=\"about\">Biography</label>\r\n              <textarea defaultValue={activeUser.about} type=\"text\" placeholder=\"About me\" name=\"about\" ref={register()} />\r\n            </div>\r\n            <div className=\"error-message\">{errors.about && <p>{errors.about.message}</p>}</div>\r\n          </div>\r\n          <div className=\"buttons-container\">\r\n            <button className=\"btn-wide btn-cancel\" onClick={() => setProfileViewOpen()}>\r\n              Close\r\n            </button>\r\n            <button className=\"btn-wide btn-submit\" type=\"submit\">\r\n              Update\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  else return null;\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    users: state.setUsersData.users,\r\n    chats: state.setChatData.chats,\r\n    activeUser: state.setActiveUser.activeUser,\r\n    profileViewOpen: state.setProfileViewOpen.profileViewOpen\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  setActiveUser,\r\n  setProfileViewOpen\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ProfileView);\r\n","import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./App.css\";\n\nimport LoginView from \"./components/LoginView\";\nimport ChatView from \"./components/ChatView\";\nimport ProfileView from \"./components/ProfileView\";\n\nimport { setBrowserName } from \"./actions\";\n\n//\"homepage\":\"http://robertasliekis.github.io/chat-app-react/\",\n\nfunction App({ browserName, setBrowserName }) {\n  useEffect(() => {\n    getBrowserName();\n  });\n\n  const getBrowserName = () => {\n    let browserName = \"\";\n    if (navigator.vendor.match(/google/i)) {\n      browserName = \"chrome/blink\";\n    } else if (navigator.vendor.match(/apple/i)) {\n      browserName = \"safari/webkit\";\n    } else if (navigator.userAgent.match(/firefox\\//i)) {\n      browserName = \"firefox/gecko\";\n    } else if (navigator.userAgent.match(/edge\\//i)) {\n      browserName = \"edge/edgehtml\";\n    } else if (navigator.userAgent.match(/trident\\//i)) {\n      browserName = \"ie/trident\";\n    } else {\n      browserName = navigator.userAgent + \"\\n\" + navigator.vendor;\n    }\n    setBrowserName(browserName);\n  };\n\n  return (\n    <div className=\"app-wrapper\">\n      <div className={`app-container ${browserName !== \"safari/webkit\" ? \"container-size\" : \"\"}`}>\n        <LoginView />\n        <ChatView />\n        <ProfileView />\n      </div>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    browserName: state.setBrowserName.browserName\n  };\n};\n\nconst mapDispatchToProps = {\n  setBrowserName\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const initialState = {\r\n  activeUser: \"\"\r\n};\r\n\r\nconst setActiveUser = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"SET_ACTIVE_USER\":\r\n      let data = action.payload;\r\n      if (data !== \"\") {\r\n        if (data.id === undefined) data.id = state.activeUser.id;\r\n        if (data.friendsID === undefined) data.friendsID = state.activeUser.friendsID;\r\n      }\r\n      return { ...state, activeUser: data };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default setActiveUser;\r\n","const initialState = {\r\n  chats: \"\"\r\n};\r\n\r\nconst setChatData = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"SET_CHAT_DATA\":\r\n      return { ...state, chats: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default setChatData;\r\n","const initialState = {\r\n  users: [\r\n    {\r\n      id: 1,\r\n      email: \"user1@website.com\",\r\n      password: \"123\",\r\n      friendsId: [2, 3, 4, 5, 6, 7, 8, 9, 10],\r\n      firstName: \"Tom\",\r\n      secondName: \"Gill\",\r\n      profileImageUrl: \"https://i.ibb.co/K0hFfTX/profile02.jpg\",\r\n      city: \"Los Angeles\",\r\n      about: \"A few of my favorite sports and games are skating, gymnastics, and ping pong.\"\r\n    },\r\n    {\r\n      id: 2,\r\n      email: \"user2@website.com\",\r\n      password: \"123\",\r\n      friendsId: [1, 3, 4, 5],\r\n      firstName: \"James\",\r\n      secondName: \"Jordan\",\r\n      profileImageUrl: \"https://businesstech.co.za/news/wp-content/uploads/2015/03/Male-ideal-beauty.jpg\",\r\n      city: \"New York\",\r\n      about: \"Let me tell you about pets: I have 3 dogs, 1 cat, and a lizard.\"\r\n    },\r\n    {\r\n      id: 3,\r\n      email: \"user3@website.com\",\r\n      password: \"123\",\r\n      friendsId: [1, 2, 4, 9, 10],\r\n      firstName: \"Silvia\",\r\n      secondName: \"Cox\",\r\n      profileImageUrl: \"https://i.ibb.co/54mFXJy/profile01.jpg\",\r\n      city: \"Seattle\",\r\n      about: \"My favorite fun places I like to go are Disneyland, the beach, and grandma's house.\"\r\n    },\r\n    {\r\n      id: 4,\r\n      email: \"user4@website.com\",\r\n      password: \"123\",\r\n      friendsId: [1, 2, 3],\r\n      firstName: \"Phil\",\r\n      secondName: \"Garret\",\r\n      profileImageUrl: \"https://widgetwhats.com/app/uploads/2019/11/free-profile-photo-whatsapp-4.png\",\r\n      city: \"New Mexico\",\r\n      about: \"\"\r\n    },\r\n    {\r\n      id: 5,\r\n      email: \"user5@website.com\",\r\n      password: \"123\",\r\n      friendsId: [1, 2],\r\n      firstName: \"Peter\",\r\n      secondName: \"Pearce\",\r\n      profileImageUrl: \"https://widgetwhats.com/app/uploads/2019/11/free-profile-photo-whatsapp-2.png\",\r\n      city: \"Chicago\",\r\n      about: \"My favorite subjects are art, robotics, dance, and math.\"\r\n    },\r\n    {\r\n      id: 6,\r\n      email: \"user6@website.com\",\r\n      password: \"123\",\r\n      friendsId: [1],\r\n      firstName: \"Devon\",\r\n      secondName: \"Randolph\",\r\n      profileImageUrl: \"https://i.pinimg.com/originals/8e/43/e6/8e43e679cb2f6c4cbd83dbc0d026539f.jpg\",\r\n      city: \"Vancouver\",\r\n      about: \"\"\r\n    },\r\n    {\r\n      id: 7,\r\n      email: \"user7@website.com\",\r\n      password: \"123\",\r\n      friendsId: [1, 10],\r\n      firstName: \"Ashton\",\r\n      secondName: \"Gordon\",\r\n      profileImageUrl: \"https://www.rd.com/wp-content/uploads/2017/09/01-shutterstock_476340928-Irina-Bg.jpg\",\r\n      city: \"Banff\",\r\n      about: \"My family members are Shyli, Grace, Sky, Megan, and Joey.\"\r\n    },\r\n    {\r\n      id: 8,\r\n      email: \"user8@website.com\",\r\n      password: \"123\",\r\n      friendsId: [1, 9],\r\n      firstName: \"Daniel\",\r\n      secondName: \"Morris\",\r\n      profileImageUrl: \"https://post.medicalnewstoday.com/wp-content/uploads/sites/3/2020/02/266749_2200-732x549.jpg\",\r\n      city: \"Toronto\",\r\n      about: \"\"\r\n    },\r\n    {\r\n      id: 9,\r\n      email: \"user9@website.com\",\r\n      password: \"123\",\r\n      friendsId: [1, 3, 8, 10],\r\n      firstName: \"Alan\",\r\n      secondName: \"Baldwin\",\r\n      profileImageUrl: \"https://i.ibb.co/rfKSm75/user.png\",\r\n      city: \"Lima\",\r\n      about: \"Certified internet ninja. Foodaholic. Hardcore bacon aficionado. Student. Organizer. Incurable travel fanatic. Twitter nerd.\"\r\n    },\r\n    {\r\n      id: 10,\r\n      email: \"user10@website.com\",\r\n      password: \"123\",\r\n      friendsId: [1, 3, 7, 9],\r\n      firstName: \"Jane\",\r\n      secondName: \"Allen\",\r\n      profileImageUrl: \"https://cupcakesandcashmere.com/.image/t_share/MTU5MzMzODc5MDkyNjE4NDU0/img_0863.jpg\",\r\n      city: \"San Francisco\",\r\n      about: \"Bacon practitioner. Falls down a lot. Tv fanatic. Zombie nerd.\"\r\n    }\r\n  ]\r\n};\r\n\r\nconst setUsersData = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"SET_USERS_DATA\":\r\n      return { ...state, users: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default setUsersData;\r\n","const initialState = {\r\n  activeChatIndex: 0,\r\n  activeChatOpen: false\r\n};\r\n\r\nconst setActiveChat = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"SET_ACTIVE_CHAT\":\r\n      let data = action.payload;\r\n      let activeChatIndex;\r\n      let activeChatOpen;\r\n\r\n      if (data.index !== undefined) {\r\n        activeChatIndex = data.index;\r\n      } else {\r\n        activeChatIndex = state.activeChatIndex;\r\n      }\r\n\r\n      if (data.open !== undefined) {\r\n        activeChatOpen = data.open;\r\n      } else {\r\n        activeChatOpen = state.activeChatOpen;\r\n      }\r\n\r\n      return { ...state, activeChatIndex: activeChatIndex, activeChatOpen: activeChatOpen };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default setActiveChat;\r\n","const initialState = {\r\n  dataUpdateIndex: 0\r\n};\r\n\r\nconst setDataUpdated = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"SET_DATA_UPDATED\":\r\n      return { ...state, dataUpdateIndex: state.dataUpdateIndex + 1 };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default setDataUpdated;\r\n","const initialState = {\r\n  userChats: \"\"\r\n};\r\n\r\nconst setUserChats = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"SET_USER_CHATS\":\r\n      return { ...state, userChats: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default setUserChats;\r\n","const initialState = {\r\n  chatFriend: \"\"\r\n};\r\n\r\nconst setChatFriend = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"SET_CHAT_FRIEND\":\r\n      return { ...state, chatFriend: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default setChatFriend;\r\n","const initialState = {\r\n  userFriends: \"\"\r\n};\r\n\r\nconst setUserFriends = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"SET_USER_FRIENDS\":\r\n      return { ...state, userFriends: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default setUserFriends;\r\n","const initialState = {\r\n  profileViewOpen: false\r\n};\r\n\r\nconst setProfileViewOpen = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"SET_PROFILE_VIEW_OPEN\":\r\n      let initialViewState = state.profileViewOpen;\r\n      return { ...state, profileViewOpen: !initialViewState };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default setProfileViewOpen;\r\n","const initialState = {\r\n  newChatWindowOpen: false\r\n};\r\n\r\nconst setNewChatWindowOpen = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"SET_NEW_CHAT_WINDOW_OPEN\":\r\n      let initialWindowState = state.newChatWindowOpen;\r\n      return { ...state, newChatWindowOpen: !initialWindowState };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default setNewChatWindowOpen;\r\n","const initialState = {\r\n  browserName: \"\"\r\n};\r\n\r\nconst setBrowserName = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"SET_BROWSER_NAME\":\r\n      return { ...state, browserName: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default setBrowserName;\r\n","import { combineReducers } from \"redux\";\r\nimport setActiveUser from \"./setActiveUser\";\r\nimport setChatData from \"./setChatData\";\r\nimport setUsersData from \"./setUsersData\";\r\nimport setActiveChat from \"./setActiveChat\";\r\nimport setDataUpdated from \"./setDataUpdated\";\r\nimport setUserChats from \"./setUserChats\";\r\nimport setChatFriend from \"./setChatFriend\";\r\nimport setUserFriends from \"./setUserFriends\";\r\nimport setProfileViewOpen from \"./setProfileViewOpen\";\r\nimport setNewChatWindowOpen from \"./setNewChatWindowOpen\";\r\nimport setBrowserName from \"./setBrowserName\";\r\n\r\nexport default combineReducers({\r\n  setActiveUser: setActiveUser,\r\n  setChatData: setChatData,\r\n  setUsersData: setUsersData,\r\n  setActiveChat: setActiveChat,\r\n  setDataUpdated: setDataUpdated,\r\n  setUserChats: setUserChats,\r\n  setChatFriend: setChatFriend,\r\n  setUserFriends: setUserFriends,\r\n  setProfileViewOpen: setProfileViewOpen,\r\n  setNewChatWindowOpen: setNewChatWindowOpen,\r\n  setBrowserName: setBrowserName\r\n});\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport reducers from \"./reducers/allReducers\";\n\nconst store = createStore(reducers);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}