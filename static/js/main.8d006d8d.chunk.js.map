{"version":3,"sources":["actions/index.js","components/LoginView.js","data/apiData.js","components/ChatView-components/UserPanel.js","components/ChatView-components/ChatsList.js","components/ChatView-components/UsersInChat.js","components/ChatView-components/MessageTimer.js","components/ChatView-components/MessagesWindow.js","components/ChatView-components/FriendPanel.js","components/ChatView-components/NewChatWindow.js","components/ChatView-components/DarkOverlay.js","components/ChatView.js","components/ProfileView.js","App.js","reportWebVitals.js","reducers/setActiveUser.js","reducers/setChatData.js","reducers/setUsersData.js","reducers/setActiveChat.js","reducers/setDataUpdated.js","reducers/setUserChats.js","reducers/setChatFriend.js","reducers/setUserFriends.js","reducers/setProfileViewOpen.js","reducers/setNewChatWindowOpen.js","reducers/setBrowserName.js","reducers/allReducers.js","index.js"],"names":["setActiveUser","userId","type","payload","setChatData","chats","setActiveChat","index","setDataUpdated","setUserChats","setChatFriend","friend","setProfileViewOpen","setNewChatWindowOpen","mapDispatchToProps","connect","state","users","setUsersData","activeUser","useForm","register","handleSubmit","errors","useState","incorrectLogin","setIncorrectLogin","setEmailInput","className","onSubmit","inputData","userExist","forEach","user","email","password","checkUserNameAndPassword","icon","faComments","defaultValue","onChange","event","target","value","name","placeholder","ref","required","pattern","message","faLock","faUser","style","opacity","apiData","url","headers","versioning","backgroundImage","profileImageUrl","onClick","faUserEdit","faSignOutAlt","activeChatIndex","userChats","chatFriend","undefined","faPlus","map","chat","lastMessage","lastMessageText","senderName","messages","length","lastMessageSenderID","id","usersInChat","filter","firstName","sender","text","getLastMessageSender","activeChatClass","friendProfile","getFriendProfile","open","secondName","faArrowLeft","messageData","onMessageTimerChange","messageIndex","time","setTime","useEffect","timer","setTimeout","clearTimeout","hideMessageFromActiveUser","updatedMessage","activeChatOpen","chatMessagesEnd","useRef","scrollToBottom","scrollType","current","scrollIntoView","behavior","setLoading","setError","checked","setChecked","setDissapearingMessage","dissapearingMessage","displayDissapearingMessage","push","updateChatData","activeChatID","chatID","chatsDataCopy","JSON","parse","stringify","openChat","deleteMessage","deleteDissapearingMessage","updateTime","Date","now","splice","updatedUserChats","axios","put","then","catch","err","seenCount","messageTimerChange","data","messageSenderID","messageText","messageSender","getMessageSender","messageContainerClass","messageTimer","displayMessage","messageSenderId","inputField","reset","htmlFor","faPaperPlane","userFriends","setUserFriends","newChatWindowOpen","checkIfChatExists","friendId","chatIndex","chatExist","usersIDs","display","newChat","sameChat","newChatsData","addNewChat","friends","dataUpdateIndex","setChatsLoading","setChatsError","isInitialMount","getUserChats","getChatFriendInfo","getUserFriends","getData","get","response","chatsData","matchedID","userID","sort","a","b","friendsId","profileViewOpen","imageUrlInput","setImageUrlInput","imageExists","setImageExists","emailExists","setEmailExists","image","Image","onload","this","width","onerror","src","checkIfImageExist","inputEmail","sameEmail","checkEmailDuplicate","firstname","secondname","e","city","about","setBrowserName","browserName","getBrowserName","navigator","vendor","match","userAgent","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","activeUser1","action","friendsID","age","initialViewState","initialWindowState","combineReducers","store","createStore","reducers","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8d006d8d.chunk.js","sourcesContent":["export const setActiveUser = (userId) => {\r\n  return {\r\n    type: \"SET_ACTIVE_USER\",\r\n    payload: userId\r\n  };\r\n};\r\n\r\nexport const setChatData = (chats) => {\r\n  return {\r\n    type: \"SET_CHAT_DATA\",\r\n    payload: chats\r\n  };\r\n};\r\n\r\nexport const setUsersData = (users) => {\r\n  return {\r\n    type: \"SET_USERS_DATA\",\r\n    payload: users\r\n  };\r\n};\r\n\r\nexport const setActiveChat = (index) => {\r\n  return {\r\n    type: \"SET_ACTIVE_CHAT\",\r\n    payload: index\r\n  };\r\n};\r\n\r\nexport const setDataUpdated = () => {\r\n  return {\r\n    type: \"SET_DATA_UPDATED\"\r\n  };\r\n};\r\n\r\nexport const setUserChats = (chats) => {\r\n  return {\r\n    type: \"SET_USER_CHATS\",\r\n    payload: chats\r\n  };\r\n};\r\n\r\nexport const setChatFriend = (friend) => {\r\n  return {\r\n    type: \"SET_CHAT_FRIEND\",\r\n    payload: friend\r\n  };\r\n};\r\n\r\nexport const setUserFriends = (friends) => {\r\n  return {\r\n    type: \"SET_USER_FRIENDS\",\r\n    payload: friends\r\n  };\r\n};\r\n\r\nexport const setProfileViewOpen = () => {\r\n  return {\r\n    type: \"SET_PROFILE_VIEW_OPEN\"\r\n  };\r\n};\r\n\r\nexport const setNewChatWindowOpen = () => {\r\n  return {\r\n    type: \"SET_NEW_CHAT_WINDOW_OPEN\"\r\n  };\r\n};\r\n\r\nexport const setBrowserName = (browserName) => {\r\n  return {\r\n    type: \"SET_BROWSER_NAME\",\r\n    payload: browserName\r\n  };\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faComments } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faUser } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faLock } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport { useForm } from \"react-hook-form\";\r\nimport { connect } from \"react-redux\";\r\nimport { setActiveUser } from \"../actions\";\r\n\r\nfunction LoginView({ users, setActiveUser, activeUser }) {\r\n  const { register, handleSubmit, errors } = useForm();\r\n\r\n  const [incorrectLogin, setIncorrectLogin] = useState(false);\r\n\r\n  const [emailInput, setEmailInput] = useState(\"\");\r\n\r\n  const checkUserNameAndPassword = (inputData) => {\r\n    let userExist = false;\r\n    users.forEach((user, index) => {\r\n      if (user.email === inputData.email && user.password === inputData.password) {\r\n        userExist = true;\r\n        setActiveUser(user);\r\n      }\r\n    });\r\n    if (userExist) {\r\n      setIncorrectLogin(false);\r\n    } else {\r\n      setIncorrectLogin(true);\r\n    }\r\n  };\r\n\r\n  const update = (event) => {\r\n    setEmailInput(event.target.value);\r\n  };\r\n\r\n  const onSubmit = (inputData) => {\r\n    checkUserNameAndPassword(inputData);\r\n  };\r\n\r\n  if (activeUser === \"\")\r\n    return (\r\n      <div className=\"login-view-container\">\r\n        <form className=\"login-form form\" onSubmit={handleSubmit(onSubmit)}>\r\n          <div className=\"logo\">\r\n            <FontAwesomeIcon icon={faComments} className=\"icon icon-top\" />\r\n            <h1 className=\"form-main-heading\">Chat App</h1>\r\n          </div>\r\n          <div className=\"form-input\">\r\n            <div>\r\n              <div className=\"input-field\">\r\n                <input\r\n                  defaultValue=\"user1@website.com\"\r\n                  onChange={update}\r\n                  name=\"email\"\r\n                  placeholder=\"Email\"\r\n                  ref={register({\r\n                    required: \"*Email is required\",\r\n                    pattern: {\r\n                      value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\r\n                      message: \"*Invalid email address\"\r\n                    }\r\n                  })}\r\n                />\r\n                <FontAwesomeIcon icon={faLock} className=\"icon\" />\r\n              </div>\r\n            </div>\r\n            <div className=\"error-message\">{errors.email && errors.email.message}</div>\r\n          </div>\r\n          <div className=\"form-input\">\r\n            <div className=\"input-field\">\r\n              <input\r\n                defaultValue=\"123\"\r\n                type=\"password\"\r\n                placeholder=\"Password\"\r\n                name=\"password\"\r\n                ref={register({ required: \"*Password is required\" })}\r\n              />\r\n              <FontAwesomeIcon icon={faUser} className=\"icon\" />\r\n            </div>\r\n            <div className=\"error-message\">{errors.password && <p>{errors.password.message}</p>}</div>\r\n            <div className=\"error-message error-message-incorrect-input\" style={{ opacity: incorrectLogin ? 1 : 0 }}>\r\n              *Incorrect email or password\r\n            </div>\r\n          </div>\r\n          <button className=\"btn-wide btn-submit\" type=\"submit\">\r\n            Login\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  else return null;\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    users: state.setUsersData.users,\r\n    activeUser: state.setActiveUser.activeUser\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  setActiveUser\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginView);\r\n","let url = \"https://api.jsonbin.io/b/603780b50866664b1082fc62\";\r\nurl = \"./data/messages.json\";\r\nconst secretKey = \"$2b$10$AgTzU7bySpzUlTMa4xuwT.Y.GSwY4okUERqzYphPesdnIj0G3K32q\";\r\nconst headers = {\r\n  headers: { \"secret-key\": secretKey, versioning: false }\r\n};\r\n\r\nconst apiData = { url: url, headers: headers };\r\n\r\nexport default apiData;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faSignOutAlt } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faUserEdit } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport { setActiveUser, setProfileViewOpen, setChatData, setUserChats } from \"../../actions\";\r\n\r\nfunction UserPanel({ activeUser, setActiveUser, setProfileViewOpen, setChatData }) {\r\n  return (\r\n    <div className=\"user-panel-container\">\r\n      <div className=\"container\">\r\n        <div className=\"profile-image\" style={{ backgroundImage: `url(\"${activeUser.profileImageUrl}\")` }}></div>\r\n        <button className=\"btn btn-edit-profile\" onClick={() => setProfileViewOpen()}>\r\n          <FontAwesomeIcon icon={faUserEdit} className=\"icon\" />\r\n          <div className=\"btn-text\">Profile</div>\r\n        </button>\r\n        <button\r\n          className=\"btn btn-sign-out\"\r\n          onClick={() => {\r\n            setActiveUser(\"\");\r\n            setChatData(\"\");\r\n            setUserChats(\"\");\r\n          }}\r\n        >\r\n          <FontAwesomeIcon icon={faSignOutAlt} className=\"icon\" />\r\n          <div className=\"btn-text\">Sign out</div>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    activeUser: state.setActiveUser.activeUser\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  setActiveUser,\r\n  setProfileViewOpen,\r\n  setChatData,\r\n  setUserChats\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserPanel);\r\n","import React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlus } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport { setActiveChat, setDataUpdated, setChatFriend, setNewChatWindowOpen } from \"../../actions\";\r\n\r\nfunction ChatsList({ activeUser, setActiveChat, activeChatIndex, userChats, setNewChatWindowOpen }) {\r\n  const getLastMessageSender = (chat) => {\r\n    let lastMessageText = \"\";\r\n    let senderName = \"\";\r\n    if (chat.messages.length > 0) {\r\n      let lastMessageSenderID = chat.messages[chat.messages.length - 1][0];\r\n      lastMessageText = chat.messages[chat.messages.length - 1][1];\r\n      senderName = \"\";\r\n      if (lastMessageSenderID === activeUser.id) {\r\n        senderName = \"you\";\r\n      } else {\r\n        senderName = chat.usersInChat.filter((user) => lastMessageSenderID === user.id);\r\n        senderName = senderName[0].firstName;\r\n      }\r\n    }\r\n    let lastMessage = { sender: senderName, text: lastMessageText };\r\n    return lastMessage;\r\n  };\r\n\r\n  const getFriendProfile = (index) => {\r\n    let usersInChat = userChats[index].usersInChat;\r\n    let friendProfile = usersInChat.filter((user) => activeUser.id !== user.id);\r\n    return friendProfile[0];\r\n  };\r\n\r\n  if (userChats !== \"\" && userChats !== undefined)\r\n    return (\r\n      <div className=\"chats-list-container\">\r\n        <div className=\"chats-list-top\">\r\n          <h1>Chats</h1>\r\n          <button className=\"btn btn-new-chat\" onClick={() => setNewChatWindowOpen()}>\r\n            <FontAwesomeIcon icon={faPlus} className=\"icon\" />\r\n          </button>\r\n        </div>\r\n        <div className=\"user-chats\">\r\n          {userChats.map((chat, index) => {\r\n            let lastMessage = getLastMessageSender(chat);\r\n            let activeChatClass = activeChatIndex === index ? \"active-chat\" : \"\";\r\n            let friendProfile = getFriendProfile(index);\r\n            return (\r\n              <div className={`user-chat ${activeChatClass}`} key={index} onClick={() => setActiveChat({ index: index, open: true })}>\r\n                <div className=\"friend-profile-image\" style={{ backgroundImage: `url(\"${friendProfile.profileImageUrl}\")` }}></div>\r\n                <div className=\"chat-info\">\r\n                  <div className=\"name-container\">\r\n                    <div className=\"firstname\">{friendProfile.firstName}</div>\r\n                    <div className=\"secondname\">{friendProfile.secondName}</div>\r\n                  </div>\r\n                  <div className=\"last-message-container\">\r\n                    <div className=\"message-sender\">{`${lastMessage.sender}${lastMessage.sender !== \"\" ? \":\" : \"\"}`}</div>\r\n                    <div className=\"message-text\">{lastMessage.text}</div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  else return null;\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    activeUser: state.setActiveUser.activeUser,\r\n    users: state.setUsersData.users,\r\n    chats: state.setChatData.chats,\r\n    activeChatIndex: state.setActiveChat.activeChatIndex,\r\n    userChats: state.setUserChats.userChats,\r\n    chatFriend: state.setChatFriend.chatFriend[0]\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  setActiveChat,\r\n  setDataUpdated,\r\n  setChatFriend,\r\n  setNewChatWindowOpen\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ChatsList);\r\n","import React from \"react\";\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faArrowLeft } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport { setActiveChat } from \"../../actions\";\r\n\r\nfunction UsersInChat({ activeUser, activeChatIndex, userChats, setActiveChat }) {\r\n  return (\r\n    <div className=\"users-in-chat-container\">\r\n      {userChats[activeChatIndex].usersInChat.map((user, index) => {\r\n        let profileImageUrl = user.profileImageUrl;\r\n        return user.id !== activeUser.id ? (\r\n          <div key={index} className=\"user-in-chat-info\">\r\n            <button className=\"btn btn-back\" onClick={() => setActiveChat({ open: false })}>\r\n              <FontAwesomeIcon icon={faArrowLeft} className=\"icon\" />\r\n            </button>\r\n            <div className=\"user-avatar-container\" style={{ backgroundImage: `url(\"${profileImageUrl}\")` }}></div>\r\n            <div className=\"name-container\">\r\n              <div className=\"user-firstname user-name\">{user.firstName}</div>\r\n              <div className=\"user-secondname user-name\">{user.secondName}</div>\r\n            </div>\r\n          </div>\r\n        ) : null;\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    activeUser: state.setActiveUser.activeUser,\r\n    activeChatIndex: state.setActiveChat.activeChatIndex,\r\n    userChats: state.setUserChats.userChats\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  setActiveChat\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UsersInChat);\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nfunction MessageTimer({ messageData, activeUser, onMessageTimerChange, messageIndex }) {\r\n  const [time, setTime] = useState(3);\r\n\r\n  useEffect(() => {\r\n    if (time >= 1) {\r\n      let timer = setTimeout(() => {\r\n        let currentTime = time;\r\n        setTime(currentTime - 1);\r\n      }, 1000);\r\n      return () => clearTimeout(timer);\r\n    } else if (time === 0) {\r\n      hideMessageFromActiveUser();\r\n    }\r\n  });\r\n\r\n  const hideMessageFromActiveUser = () => {\r\n    let displayMessage = messageData[2];\r\n    displayMessage.forEach((user, index) => {\r\n      let userId = user[0];\r\n      if (activeUser.id === userId) {\r\n        let updatedMessage = messageData;\r\n        updatedMessage[2][index][1] = false;\r\n        onMessageTimerChange(updatedMessage, messageIndex);\r\n      }\r\n    });\r\n  };\r\n\r\n  return <div className=\"message-timer\">{`00:${time >= 10 ? \"\" : \"0\"}${time}`}</div>;\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    activeUser: state.setActiveUser.activeUser\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(MessageTimer);\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { connect } from \"react-redux\";\r\nimport axios from \"axios\";\r\n\r\nimport apiData from \"../../data/apiData\";\r\n\r\nimport UsersInChat from \"./UsersInChat\";\r\nimport MessageTimer from \"./MessageTimer\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPaperPlane } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport { setDataUpdated, setActiveChat, setChatData, setUserChats } from \"../../actions\";\r\n\r\nfunction MessagesWindow({\r\n  activeUser,\r\n  chats,\r\n  activeChatIndex,\r\n  setDataUpdated,\r\n  userChats,\r\n  setActiveChat,\r\n  activeChatOpen,\r\n  setUserChats,\r\n  setChatData,\r\n  chatFriend\r\n}) {\r\n  const chatMessagesEnd = useRef(null);\r\n  const { register, handleSubmit, errors } = useForm();\r\n\r\n  const scrollToBottom = (scrollType) => {\r\n    chatMessagesEnd.current?.scrollIntoView({ behavior: scrollType });\r\n  };\r\n\r\n  useEffect(() => {\r\n    scrollToBottom(\"smooth\");\r\n  }, [chats]);\r\n\r\n  useEffect(() => {\r\n    scrollToBottom(\"auto\");\r\n  }, [activeChatIndex]);\r\n\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(\"\");\r\n\r\n  const [checked, setChecked] = useState(false);\r\n  const handleClick = () => setChecked(!checked);\r\n\r\n  const getMessageSender = (messageSenderID) => {\r\n    let usersInChat = userChats[activeChatIndex].usersInChat;\r\n    let messageSender = usersInChat.filter((user) => messageSenderID === user.id);\r\n    return messageSender[0];\r\n  };\r\n\r\n  const onSubmit = (data, inputField) => {\r\n    inputField.target.reset();\r\n    let messageData = [activeUser.id, data.message];\r\n    messageData = setDissapearingMessage(messageData, data.dissapearingMessage);\r\n    updateChatData(messageData);\r\n  };\r\n\r\n  const setDissapearingMessage = (messageData, dissapearingMessage) => {\r\n    if (dissapearingMessage) {\r\n      let displayDissapearingMessage = [\r\n        [activeUser.id, true],\r\n        [chatFriend.id, true]\r\n      ];\r\n      messageData.push(displayDissapearingMessage);\r\n    }\r\n    return messageData;\r\n  };\r\n\r\n  const updateChatData = (messageData, messageIndex) => {\r\n    let activeChatID = userChats[activeChatIndex].chatID;\r\n    let chatsDataCopy = JSON.parse(JSON.stringify(chats));\r\n    let openChat = JSON.parse(JSON.stringify(userChats[activeChatIndex]));\r\n    let deleteMessage = false;\r\n\r\n    if (messageData[2]) {\r\n      deleteMessage = deleteDissapearingMessage(messageData[2]);\r\n    }\r\n\r\n    if (messageIndex === undefined) {\r\n      openChat.updateTime = Date.now();\r\n      openChat.messages.push(messageData);\r\n    } else {\r\n      if (deleteMessage) {\r\n        openChat.messages.splice(messageIndex, 1);\r\n      } else {\r\n        openChat.messages[messageIndex] = messageData;\r\n      }\r\n    }\r\n\r\n    chatsDataCopy.forEach((chat, index) => {\r\n      if (activeChatID === chat.chatID) {\r\n        chatsDataCopy[index] = openChat;\r\n        if (messageIndex === undefined) {\r\n          chatsDataCopy[index].updateTime = Date.now();\r\n        }\r\n      }\r\n    });\r\n\r\n    let updatedUserChats = JSON.parse(JSON.stringify(userChats));\r\n    updatedUserChats[activeChatIndex] = openChat;\r\n\r\n    setUserChats(updatedUserChats);\r\n    setChatData(chatsDataCopy);\r\n    setActiveChat({ index: 0 });\r\n\r\n    axios\r\n      .put(apiData.url, { chats: chatsDataCopy }, apiData.headers)\r\n      .then(() => {\r\n        setLoading(false);\r\n        setDataUpdated();\r\n      })\r\n      .catch((err) => {\r\n        setLoading(false);\r\n        setError(err);\r\n      });\r\n  };\r\n\r\n  const deleteDissapearingMessage = (displayDissapearingMessage) => {\r\n    let seenCount = 0;\r\n    displayDissapearingMessage.forEach((message, index) => {\r\n      if (!message[1]) {\r\n        seenCount++;\r\n      }\r\n    });\r\n    if (seenCount === displayDissapearingMessage.length) {\r\n      return true;\r\n    } else return false;\r\n  };\r\n\r\n  const displayDissapearingMessage = (dissapearingMessage) => {\r\n    let displayMessage = true;\r\n    if (dissapearingMessage) {\r\n      dissapearingMessage.forEach((message, index) => {\r\n        let messageSenderId = message[0];\r\n        if (activeUser.id === messageSenderId) displayMessage = message[1];\r\n      });\r\n    }\r\n    return displayMessage;\r\n  };\r\n\r\n  const messageTimerChange = (data, messageIndex) => {\r\n    updateChatData(data, messageIndex);\r\n  };\r\n\r\n  return (\r\n    <div className={`messages-window-container messages-window-hide-mobile ${activeChatOpen ? \"messages-window-show-mobile\" : \"\"}`}>\r\n      <UsersInChat />\r\n      <div className=\"sent-messages-container\">\r\n        <div className=\"overflow-wrapper\">\r\n          {userChats[activeChatIndex].messages.map((message, index) => {\r\n            let messageSenderID = message[0];\r\n            let messageText = message[1];\r\n            let messageSender = getMessageSender(messageSenderID);\r\n            let messageContainerClass = activeUser.id === messageSenderID ? \"right\" : \"left\";\r\n            let messageTimer = message[2];\r\n            let displayMessage = displayDissapearingMessage(message[2]);\r\n            if (displayMessage)\r\n              return (\r\n                <div className={`message-container message-container-${messageContainerClass}`} key={index}>\r\n                  {messageTimer ? (\r\n                    <MessageTimer messageData={message} messageIndex={index} onMessageTimerChange={messageTimerChange} />\r\n                  ) : null}\r\n                  <div className=\"name-container\">\r\n                    <div className=\"sender-firstname sender-name\">{messageSender.firstName}</div>\r\n                    <div className=\"sender-secondname sender-name\">{messageSender.secondName}</div>\r\n                  </div>\r\n                  <div className=\"friend-avatar-container\" style={{ backgroundImage: `url(\"${messageSender.profileImageUrl}\")` }}></div>\r\n                  <div className=\"message-text\">{messageText}</div>\r\n                </div>\r\n              );\r\n            else return null;\r\n          })}\r\n          <div ref={chatMessagesEnd} className=\"bottom-container\"></div>\r\n        </div>\r\n      </div>\r\n\r\n      <form className=\"send-message-container\" onSubmit={handleSubmit(onSubmit)}>\r\n        <div className=\"dissapearing-message-container\">\r\n          <label htmlFor=\"dissapearingMessage\">Dissapearing message</label>\r\n          <input className=\"check-box\" type=\"checkbox\" name=\"dissapearingMessage\" checked={checked} onChange={handleClick} ref={register} />\r\n        </div>\r\n        <textarea\r\n          className=\"message-input\"\r\n          type=\"text\"\r\n          placeholder=\"Type a message here...\"\r\n          name=\"message\"\r\n          ref={register({ required: true })}\r\n        />\r\n        <button className=\"btn btn-send-message\">\r\n          <FontAwesomeIcon icon={faPaperPlane} className=\"icon\" />\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    activeUser: state.setActiveUser.activeUser,\r\n    chats: state.setChatData.chats,\r\n    activeChatIndex: state.setActiveChat.activeChatIndex,\r\n    activeChatOpen: state.setActiveChat.activeChatOpen,\r\n    userChats: state.setUserChats.userChats,\r\n    chatFriend: state.setChatFriend.chatFriend\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  setDataUpdated,\r\n  setActiveChat,\r\n  setUserChats,\r\n  setChatData\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MessagesWindow);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nfunction FriendPanel({ chatFriend }) {\r\n  return (\r\n    <div className=\"friend-panel-container\">\r\n      <div className=\"container\">\r\n        <div className=\"profile-image\" style={{ backgroundImage: `url(\"${chatFriend.profileImageUrl}\")` }}></div>\r\n        <div className=\"names-container\">\r\n          <div className=\"first-name\">{chatFriend.firstName}</div>\r\n          <div className=\"second-name\">{chatFriend.secondName}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    chatFriend: state.setChatFriend.chatFriend\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(FriendPanel);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { setChatData, setActiveChat, setNewChatWindowOpen } from \"../../actions\";\r\n\r\nfunction NewChatWindow({ userFriends, activeUser, newChatWindowOpen, chats, setChatData, userChats, setActiveChat, setNewChatWindowOpen }) {\r\n  const addNewChat = (friendId) => {\r\n    let chatsDataCopy = JSON.parse(JSON.stringify(chats));\r\n    let newChatId = chats.length + 1;\r\n    let newChat = {\r\n      chatID: newChatId,\r\n      updateTime: Date.now(),\r\n      usersIDs: [activeUser.id, friendId],\r\n      messages: []\r\n    };\r\n    let sameChat = checkIfChatExists(friendId);\r\n    if (sameChat.chatExist) {\r\n      setActiveChat(sameChat.chatIndex);\r\n    } else {\r\n      let newChatsData = [newChat, ...chatsDataCopy];\r\n      setChatData(newChatsData);\r\n      setActiveChat(0);\r\n    }\r\n    setNewChatWindowOpen();\r\n  };\r\n\r\n  const checkIfChatExists = (friendId) => {\r\n    let chatExist = false;\r\n    let chatIndex;\r\n    userChats.forEach((chat, index) => {\r\n      chat.usersIDs.forEach((id) => {\r\n        if (friendId === id) {\r\n          chatExist = true;\r\n          chatIndex = index;\r\n        }\r\n      });\r\n    });\r\n    return { chatExist: chatExist, chatIndex: chatIndex };\r\n  };\r\n\r\n  if (userFriends !== \"\")\r\n    return (\r\n      <div className=\"new-chat-container\" style={{ display: newChatWindowOpen ? \"flex\" : \"none\" }}>\r\n        <h1>New chat</h1>\r\n        {userFriends.map((friend, index) => (\r\n          <div className=\"friend-info\" key={index} onClick={() => addNewChat(friend.id)}>\r\n            <div className=\"friend-profile-image\" style={{ backgroundImage: `url(\"${friend.profileImageUrl}\")` }}></div>\r\n            <div className=\"name-container\">\r\n              <div className=\"firstname\">{friend.firstName}</div>\r\n              <div className=\"secondname\">{friend.secondName}</div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  else return null;\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userFriends: state.setUserFriends.userFriends,\r\n    newChatWindowOpen: state.setNewChatWindowOpen.newChatWindowOpen,\r\n    activeUser: state.setActiveUser.activeUser,\r\n    chats: state.setChatData.chats,\r\n    userChats: state.setUserChats.userChats\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = { setChatData, setActiveChat, setNewChatWindowOpen };\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NewChatWindow);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { setNewChatWindowOpen } from \"../../actions\";\r\n\r\nfunction DarkOverlay({ setNewChatWindowOpen, newChatWindowOpen }) {\r\n  return (\r\n    <div\r\n      className=\"dark-overlay-container\"\r\n      style={{ display: newChatWindowOpen ? \"flex\" : \"none\" }}\r\n      onClick={() => setNewChatWindowOpen()}\r\n    ></div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    newChatWindowOpen: state.setNewChatWindowOpen.newChatWindowOpen\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  setNewChatWindowOpen\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DarkOverlay);\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport axios from \"axios\";\r\n\r\nimport apiData from \"../data/apiData\";\r\n\r\nimport UserPanel from \"./ChatView-components/UserPanel\";\r\nimport ChatsList from \"./ChatView-components/ChatsList\";\r\nimport MessagesWindow from \"./ChatView-components/MessagesWindow\";\r\nimport FriendPanel from \"./ChatView-components/FriendPanel\";\r\nimport NewChatWindow from \"./ChatView-components/NewChatWindow\";\r\nimport DarkOverlay from \"./ChatView-components/DarkOverlay\";\r\n\r\nimport { setUserChats, setChatFriend, setUserFriends, setChatData } from \"../actions\";\r\n\r\nfunction ChatView({\r\n  users,\r\n  chats,\r\n  activeUser,\r\n  userChats,\r\n  dataUpdateIndex,\r\n  activeChatIndex,\r\n  setUserChats,\r\n  setChatFriend,\r\n  setUserFriends,\r\n  setChatData,\r\n  chatFriend\r\n}) {\r\n  const [chatsLoading, setChatsLoading] = useState(true);\r\n  const [chatsError, setChatsError] = useState(\"\");\r\n  const [skaicius, setskaicius] = useState(9);\r\n\r\n  const isInitialMount = useRef(true);\r\n\r\n  useEffect(() => {\r\n    if (isInitialMount.current) {\r\n      isInitialMount.current = false;\r\n    } else {\r\n      setUserChats(getUserChats());\r\n      getChatFriendInfo();\r\n      getUserFriends();\r\n    }\r\n  }, [chats]);\r\n\r\n  useEffect(() => {\r\n    if (activeUser !== \"\") {\r\n      getData();\r\n    }\r\n  }, [activeUser]);\r\n\r\n  useEffect(() => {\r\n    if (activeUser !== \"\") {\r\n      getData();\r\n    }\r\n  }, [dataUpdateIndex]);\r\n\r\n  useEffect(() => {\r\n    if (activeUser !== \"\") {\r\n      getChatFriendInfo();\r\n    }\r\n  }, [activeChatIndex]);\r\n\r\n  const getData = () => {\r\n    axios\r\n      .get(apiData.url, apiData.headers)\r\n      .then((response) => {\r\n        setChatsLoading(false);\r\n        let chatsData = response.data.chats;\r\n        setChatData(chatsData);\r\n      })\r\n      .catch((err) => {\r\n        setChatsError(err);\r\n        setChatsLoading(false);\r\n      });\r\n  };\r\n\r\n  const getUserChats = () => {\r\n    let chatsDataCopy = JSON.parse(JSON.stringify(chats));\r\n    if (chatsDataCopy !== \"\" && chatsDataCopy !== undefined && users !== \"\" && users !== undefined) {\r\n      let userChats = [];\r\n      chatsDataCopy.forEach((chat, chatIndex) => {\r\n        let matchedID = false;\r\n        let usersInChat = [];\r\n        chat.usersIDs.forEach((userID) => {\r\n          if (userID === activeUser.id) {\r\n            matchedID = true;\r\n          }\r\n          users.forEach((user, index) => {\r\n            if (userID === user.id) {\r\n              usersInChat.push(user);\r\n            }\r\n          });\r\n        });\r\n        if (matchedID) {\r\n          userChats.push(chat);\r\n          userChats[chatIndex].usersInChat = usersInChat;\r\n        }\r\n      });\r\n      userChats.sort((a, b) => b.updateTime - a.updateTime);\r\n      return userChats;\r\n    }\r\n  };\r\n\r\n  const getUserFriends = () => {\r\n    let userFriends = [];\r\n    if (userChats !== undefined && userChats !== \"\" && activeUser !== \"\") {\r\n      activeUser.friendsId.forEach((friendId) => {\r\n        users.forEach((user) => {\r\n          if (friendId === user.id) {\r\n            userFriends.push(user);\r\n          }\r\n        });\r\n      });\r\n      setUserFriends(userFriends);\r\n    }\r\n  };\r\n\r\n  const getChatFriendInfo = () => {\r\n    if (userChats !== undefined && userChats !== \"\") {\r\n      let userChatsCopy = JSON.parse(JSON.stringify(userChats));\r\n      let chatFriend = userChatsCopy[activeChatIndex].usersInChat.filter((user) => activeUser.id !== user.id);\r\n      setChatFriend(chatFriend[0]);\r\n    }\r\n  };\r\n\r\n  if (userChats !== \"\" && userChats !== undefined && activeUser !== \"\")\r\n    return (\r\n      <div className=\"chat-view-container\">\r\n        <div className=\"chat-view-content\">\r\n          <UserPanel />\r\n          <ChatsList />\r\n          <MessagesWindow />\r\n          <FriendPanel />\r\n          <NewChatWindow />\r\n          <DarkOverlay />\r\n        </div>\r\n      </div>\r\n    );\r\n  else return null;\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    users: state.setUsersData.users,\r\n    chats: state.setChatData.chats,\r\n    activeUser: state.setActiveUser.activeUser,\r\n    userChats: state.setUserChats.userChats,\r\n    activeChatIndex: state.setActiveChat.activeChatIndex,\r\n    dataUpdateIndex: state.setDataUpdated.dataUpdateIndex,\r\n    chatFriend: state.setChatFriend.chatFriend\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  setChatData,\r\n  setUserChats,\r\n  setUserFriends,\r\n  setChatFriend\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ChatView);\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { connect } from \"react-redux\";\r\nimport { setActiveUser, setProfileViewOpen } from \"../actions\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faArrowLeft } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nfunction ProfileView({ users, activeUser, profileViewOpen, setActiveUser, setProfileViewOpen }) {\r\n  const { register, handleSubmit, errors } = useForm();\r\n  const [imageUrlInput, setImageUrlInput] = useState(\"\");\r\n  const [imageExists, setImageExists] = useState(true);\r\n  const [emailExists, setEmailExists] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setImageUrlInput(activeUser.profileImageUrl);\r\n  }, [profileViewOpen]);\r\n\r\n  const [emailInput, setEmailInput] = useState(\"\");\r\n\r\n  const checkIfImageExist = (url) => {\r\n    if (url !== \"\") {\r\n      let image = new Image();\r\n      image.onload = function () {\r\n        if (this.width > 0) {\r\n          setImageExists(true);\r\n        }\r\n      };\r\n      image.onerror = function () {\r\n        setImageExists(false);\r\n      };\r\n      image.src = url;\r\n    }\r\n  };\r\n\r\n  checkIfImageExist(imageUrlInput);\r\n\r\n  const checkEmailDuplicate = (inputEmail) => {\r\n    let sameEmail = false;\r\n    users.forEach((user) => {\r\n      if (activeUser.id !== user.id) {\r\n        if (inputEmail !== user.email) {\r\n        } else {\r\n          sameEmail = true;\r\n        }\r\n      }\r\n    });\r\n    if (sameEmail) {\r\n      setEmailExists(true);\r\n    } else {\r\n      setEmailExists(false);\r\n    }\r\n  };\r\n\r\n  const onSubmit = (inputData) => {\r\n    checkEmailDuplicate(inputData.email);\r\n    if (!emailExists && (imageExists || inputData.profileImageUrl === \"\")) {\r\n      if (inputData.profileImageUrl === \"\") {\r\n        inputData.profileImageUrl = \"./images/user.png\";\r\n      }\r\n      setActiveUser(inputData);\r\n    }\r\n  };\r\n\r\n  function update(event) {\r\n    setEmailInput(event.target.value);\r\n  }\r\n\r\n  if (profileViewOpen)\r\n    return (\r\n      <div className=\"profile-view-container\" key={activeUser}>\r\n        <form className=\"profile-form form\" onSubmit={handleSubmit(onSubmit)}>\r\n          <h1 className=\"form-main-heading\">\r\n            <button className=\"btn btn-back\" onClick={() => setProfileViewOpen()}>\r\n              <FontAwesomeIcon icon={faArrowLeft} className=\"icon\" />\r\n            </button>\r\n            EDIT PROFILE\r\n          </h1>\r\n          <div className=\"profile-info-container\">\r\n            <div className=\"profile-image\" style={{ backgroundImage: `url(\"${activeUser.profileImageUrl}\")` }}></div>\r\n            <div className=\"profile-info\">\r\n              <div className=\"names-container\">\r\n                <div className=\"first-name\">{activeUser.firstName}</div>\r\n                <div className=\"second-name\">{activeUser.secondName}</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"form-input\">\r\n            <div className=\"input-field\">\r\n              <label htmlFor=\"email\">Email</label>\r\n              <input\r\n                defaultValue={activeUser.email}\r\n                onChange={update}\r\n                name=\"email\"\r\n                placeholder=\"Email\"\r\n                ref={register({\r\n                  required: \"*Email is required\",\r\n                  pattern: {\r\n                    value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\r\n                    message: \"*Invalid email address\"\r\n                  }\r\n                })}\r\n              />\r\n            </div>\r\n            <div className=\"error-message\">{errors.email && !emailExists ? errors.email.message : \"\"}</div>\r\n            <div className=\"error-message error-message-email-exist\">{emailExists ? \"*User with same email exists\" : \"\"}</div>\r\n          </div>\r\n          <div className=\"form-input\">\r\n            <div className=\"input-field\">\r\n              <label htmlFor=\"password\">Password</label>\r\n              <input\r\n                defaultValue={activeUser.password}\r\n                type=\"password\"\r\n                placeholder=\"Password\"\r\n                name=\"password\"\r\n                ref={register({ required: \"*Password is required\" })}\r\n              />\r\n            </div>\r\n            <div className=\"error-message\">{errors.password && <p>{errors.password.message}</p>}</div>\r\n          </div>\r\n          <div className=\"form-input\">\r\n            <div className=\"input-field\">\r\n              <label htmlFor=\"firstname\">First name</label>\r\n              <input\r\n                defaultValue={activeUser.firstName}\r\n                type=\"text\"\r\n                placeholder=\"First name\"\r\n                name=\"firstName\"\r\n                ref={register({ required: \"*First name is required\" })}\r\n              />\r\n            </div>\r\n            <div className=\"error-message\">{errors.firstname && <p>{errors.firstname.message}</p>}</div>\r\n          </div>\r\n          <div className=\"form-input\">\r\n            <div className=\"input-field\">\r\n              <label htmlFor=\"secondname\">Second name</label>\r\n              <input\r\n                defaultValue={activeUser.secondName}\r\n                type=\"text\"\r\n                placeholder=\"Second name\"\r\n                name=\"secondName\"\r\n                ref={register({ required: \"*Second name is required\" })}\r\n              />\r\n            </div>\r\n            <div className=\"error-message\">{errors.secondname && <p>{errors.secondname.message}</p>}</div>\r\n          </div>\r\n          <div className=\"form-input\">\r\n            <div className=\"input-field\">\r\n              <label htmlFor=\"profileImageUrl\">Profile image</label>\r\n              <input\r\n                defaultValue={activeUser.profileImageUrl}\r\n                type=\"text\"\r\n                placeholder=\"Profile image url\"\r\n                name=\"profileImageUrl\"\r\n                ref={register()}\r\n                onChange={(e) => setImageUrlInput(e.target.value)}\r\n              />\r\n            </div>\r\n            <div className=\"error-message\">{imageExists || imageUrlInput === \"\" ? \"\" : \"Image does not exist\"}</div>\r\n          </div>\r\n          <div className=\"form-input\">\r\n            <div className=\"input-field\">\r\n              <label htmlFor=\"city\">City</label>\r\n              <input defaultValue={activeUser.city} type=\"text\" placeholder=\"City\" name=\"city\" ref={register()} />\r\n            </div>\r\n            <div className=\"error-message\">{errors.city && <p>{errors.city.message}</p>}</div>\r\n          </div>\r\n          <div className=\"form-input form-input-about\">\r\n            <div className=\"input-field\">\r\n              <label htmlFor=\"about\">Biography</label>\r\n              <textarea defaultValue={activeUser.about} type=\"text\" placeholder=\"About me\" name=\"about\" ref={register()} />\r\n            </div>\r\n            <div className=\"error-message\">{errors.about && <p>{errors.about.message}</p>}</div>\r\n          </div>\r\n          <div className=\"buttons-container\">\r\n            <button className=\"btn-wide btn-cancel\" onClick={() => setProfileViewOpen()}>\r\n              Close\r\n            </button>\r\n            <button className=\"btn-wide btn-submit\" type=\"submit\">\r\n              Update\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  else return null;\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    users: state.setUsersData.users,\r\n    chats: state.setChatData.chats,\r\n    activeUser: state.setActiveUser.activeUser,\r\n    profileViewOpen: state.setProfileViewOpen.profileViewOpen\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  setActiveUser,\r\n  setProfileViewOpen\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ProfileView);\r\n","import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./App.css\";\n\nimport LoginView from \"./components/LoginView\";\nimport ChatView from \"./components/ChatView\";\nimport ProfileView from \"./components/ProfileView\";\n\nimport { setBrowserName } from \"./actions\";\n\n//\"homepage\":\"http://robertasliekis.github.io/chat-app-react/\",\n\nfunction App({ browserName, setBrowserName }) {\n  useEffect(() => {\n    getBrowserName();\n  });\n\n  const getBrowserName = () => {\n    let browserName = \"\";\n    if (navigator.vendor.match(/google/i)) {\n      browserName = \"chrome/blink\";\n    } else if (navigator.vendor.match(/apple/i)) {\n      browserName = \"safari/webkit\";\n    } else if (navigator.userAgent.match(/firefox\\//i)) {\n      browserName = \"firefox/gecko\";\n    } else if (navigator.userAgent.match(/edge\\//i)) {\n      browserName = \"edge/edgehtml\";\n    } else if (navigator.userAgent.match(/trident\\//i)) {\n      browserName = \"ie/trident\";\n    } else {\n      browserName = navigator.userAgent + \"\\n\" + navigator.vendor;\n    }\n    setBrowserName(browserName);\n  };\n\n  return (\n    <div className=\"app-wrapper\">\n      <div className={`app-container ${browserName !== \"safari/webkit\" ? \"container-size\" : \"\"}`}>\n        <LoginView />\n        <ChatView />\n        <ProfileView />\n      </div>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    browserName: state.setBrowserName.browserName\n  };\n};\n\nconst mapDispatchToProps = {\n  setBrowserName\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const initialState = {\r\n  activeUser1: \"\",\r\n  activeUser: {\r\n    id: 1,\r\n    email: \"user1@website.com\",\r\n    password: \"123\",\r\n    friendsId: [2, 3, 4, 5],\r\n    firstName: \"Tom\",\r\n    secondName: \"Silver\",\r\n    city: \"vilnius\",\r\n    profileImageUrl: \"https://i.ibb.co/K0hFfTX/profile02.jpg\",\r\n    about:\r\n      \"Lorem ipsum dolor sit amet consectetur adipisicing elit. Nesciunt blanditiis unde delectus aperiam suscipit perspiciatis libero debitis perferendis corporis.\"\r\n  }\r\n};\r\n\r\nconst setActiveUser = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"SET_ACTIVE_USER\":\r\n      let data = action.payload;\r\n      if (data !== \"\") {\r\n        if (data.id === undefined) data.id = state.activeUser.id;\r\n        if (data.friendsID === undefined) data.friendsID = state.activeUser.friendsID;\r\n      }\r\n      return { ...state, activeUser: data };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default setActiveUser;\r\n","const initialState = {\r\n  chats: \"\"\r\n};\r\n\r\nconst setChatData = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"SET_CHAT_DATA\":\r\n      return { ...state, chats: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default setChatData;\r\n","const initialState = {\r\n  users: [\r\n    {\r\n      id: 1,\r\n      email: \"user1@website.com\",\r\n      password: \"123\",\r\n      friendsId: [2, 3, 4, 5],\r\n      firstName: \"Tom\",\r\n      secondName: \"Silver\",\r\n      profileImageUrl: \"https://i.ibb.co/K0hFfTX/profile02.jpg\",\r\n      age: 28,\r\n      city: \"vilnius\"\r\n    },\r\n    {\r\n      id: 2,\r\n      email: \"user2@website.com\",\r\n      password: \"123\",\r\n      friendsId: [1, 3, 4, 5],\r\n      firstName: \"John\",\r\n      secondName: \"Buck\",\r\n      profileImageUrl: \"https://i.ibb.co/rfKSm75/user.png\",\r\n      age: 22,\r\n      city: \"kaunas\"\r\n    },\r\n    {\r\n      id: 3,\r\n      email: \"user3@website.com\",\r\n      password: \"123\",\r\n      friendsId: [1, 2],\r\n      firstName: \"Silvia\",\r\n      secondName: \"Gurt\",\r\n      profileImageUrl: \"https://i.ibb.co/54mFXJy/profile01.jpg\",\r\n      age: 25,\r\n      city: \"klaipėda\"\r\n    },\r\n    {\r\n      id: 4,\r\n      email: \"user4@website.com\",\r\n      password: \"123\",\r\n      friendsId: [1],\r\n      firstName: \"Phil\",\r\n      secondName: \"Garret\",\r\n      profileImageUrl: \"https://widgetwhats.com/app/uploads/2019/11/free-profile-photo-whatsapp-4.png\",\r\n      age: 35,\r\n      city: \"Kupiskis\"\r\n    },\r\n    {\r\n      id: 5,\r\n      email: \"user5@website.com\",\r\n      password: \"123\",\r\n      friendsId: [1],\r\n      firstName: \"Peter\",\r\n      secondName: \"Big\",\r\n      profileImageUrl: \"https://widgetwhats.com/app/uploads/2019/11/free-profile-photo-whatsapp-2.png\",\r\n      age: 28,\r\n      city: \"Panevezys\"\r\n    }\r\n  ]\r\n};\r\n\r\nconst setUsersData = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"SET_USERS_DATA\":\r\n      return { ...state, users: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default setUsersData;\r\n","const initialState = {\r\n  activeChatIndex: 0,\r\n  activeChatOpen: false\r\n};\r\n\r\nconst setActiveChat = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"SET_ACTIVE_CHAT\":\r\n      let data = action.payload;\r\n      let activeChatIndex;\r\n      let activeChatOpen;\r\n\r\n      if (data.index !== undefined) {\r\n        activeChatIndex = data.index;\r\n      } else {\r\n        activeChatIndex = state.activeChatIndex;\r\n      }\r\n\r\n      if (data.open !== undefined) {\r\n        activeChatOpen = data.open;\r\n      } else {\r\n        activeChatOpen = state.activeChatOpen;\r\n      }\r\n\r\n      return { ...state, activeChatIndex: activeChatIndex, activeChatOpen: activeChatOpen };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default setActiveChat;\r\n","const initialState = {\r\n  dataUpdateIndex: 0\r\n};\r\n\r\nconst setDataUpdated = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"SET_DATA_UPDATED\":\r\n      return { ...state, dataUpdateIndex: state.dataUpdateIndex + 1 };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default setDataUpdated;\r\n","const initialState = {\r\n  userChats: \"\"\r\n};\r\n\r\nconst setUserChats = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"SET_USER_CHATS\":\r\n      return { ...state, userChats: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default setUserChats;\r\n","const initialState = {\r\n  chatFriend: \"\"\r\n};\r\n\r\nconst setChatFriend = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"SET_CHAT_FRIEND\":\r\n      return { ...state, chatFriend: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default setChatFriend;\r\n","const initialState = {\r\n  userFriends: \"\"\r\n};\r\n\r\nconst setUserFriends = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"SET_USER_FRIENDS\":\r\n      return { ...state, userFriends: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default setUserFriends;\r\n","const initialState = {\r\n  profileViewOpen: false\r\n};\r\n\r\nconst setProfileViewOpen = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"SET_PROFILE_VIEW_OPEN\":\r\n      let initialViewState = state.profileViewOpen;\r\n      return { ...state, profileViewOpen: !initialViewState };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default setProfileViewOpen;\r\n","const initialState = {\r\n  newChatWindowOpen: false\r\n};\r\n\r\nconst setNewChatWindowOpen = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"SET_NEW_CHAT_WINDOW_OPEN\":\r\n      let initialWindowState = state.newChatWindowOpen;\r\n      return { ...state, newChatWindowOpen: !initialWindowState };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default setNewChatWindowOpen;\r\n","const initialState = {\r\n  browserName: \"\"\r\n};\r\n\r\nconst setBrowserName = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"SET_BROWSER_NAME\":\r\n      return { ...state, browserName: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default setBrowserName;\r\n","import { combineReducers } from \"redux\";\r\nimport setActiveUser from \"./setActiveUser\";\r\nimport setChatData from \"./setChatData\";\r\nimport setUsersData from \"./setUsersData\";\r\nimport setActiveChat from \"./setActiveChat\";\r\nimport setDataUpdated from \"./setDataUpdated\";\r\nimport setUserChats from \"./setUserChats\";\r\nimport setChatFriend from \"./setChatFriend\";\r\nimport setUserFriends from \"./setUserFriends\";\r\nimport setProfileViewOpen from \"./setProfileViewOpen\";\r\nimport setNewChatWindowOpen from \"./setNewChatWindowOpen\";\r\nimport setBrowserName from \"./setBrowserName\";\r\n\r\nexport default combineReducers({\r\n  setActiveUser: setActiveUser,\r\n  setChatData: setChatData,\r\n  setUsersData: setUsersData,\r\n  setActiveChat: setActiveChat,\r\n  setDataUpdated: setDataUpdated,\r\n  setUserChats: setUserChats,\r\n  setChatFriend: setChatFriend,\r\n  setUserFriends: setUserFriends,\r\n  setProfileViewOpen: setProfileViewOpen,\r\n  setNewChatWindowOpen: setNewChatWindowOpen,\r\n  setBrowserName: setBrowserName\r\n});\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport reducers from \"./reducers/allReducers\";\n\nconst store = createStore(reducers);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}